/* (개발내용)
 * 
 * 씬전환시 로딩화면 씬 출력 로딩은 코루틴으로 현재상태 반복 체크 코루틴이 완료될때 씬 정상 호출(비동기 기존씬 제거)
 * 풀 데이터를 모두 회수하고, 설정값을 저장해야할것들은 기록함. 씬 전환시 해당 정보를 반영함. 
 * 
 * 
 * 1. AI
 *  - 타겟에 게임목표 지정
 *  - 공격 로직 구상
 *      1. 투사체 구분, 물리엔진보다는 가벼운 코루틴으로 대체 공격 지연시간에 맞쳐서 (애니메이션이 적에게 닿는시간) 데미지 적용
 *      2. AI - 컨트롤러의 유기성이 높음 음.. 분리하지않고 조금더 통일된 구조로 검토(연계과정에서의 불필요한 리소스 최소화)
 *      3. 공격 행위는 컨트롤러가 하는것으로 (제어권) 
 *  - 유닛별 위협등급(레벨)을 부여 자신과 비교해서 주변에 높은 유닛이 많을 경우, 공포수치 상승
 *      1. 체력비율에 따라서, 멘탈 수치를 조정함 
 *      2. 공격 받을때 호출, 호출 함수에 호출 종류를 구분할지 검토(매개변수) 
    - 유닛 이동, 회전 적용
    - 도주 로직 추가

 오브젝트 풀 구상 // 유닛 + 투사체 그룹 관리 // 다양한 종류의 유닛을 어떻게 처리할지 검토... 내용물만 바꾸는방법? 프리팹 할당? 
 * 2. UI
 *  - 유닛 UI // 마나 / 실드 표현 방법 구현 ,
 *      - 높이 위치가 카메라 각도와 잘맞지않움 위치 조절계산식이 필요함. 구할것
 *      - 씬 전환시 새로 생성되겠금 변경 필드위에 유닛 갯수+ 여유만큼 반복 생성시킴. 
 * 3. SaveLoad 설계
 * 

 * 5. 유닛 애니메이션
 * 
 * 6. 게임목표
 * 
 * 7. 자원 같은 개념 구성
 * 
 * 8. 컨텐츠 설계
 * 
 * 9. 스토리 설계
 * 
 * 10. 유닛 구조 설계
 * 
 * 
 * *** 풀링 초기화 구조중에  유닛타입에대한 변동값과 부속 오브젝트들이랑 연결 및 캐시처리하는 과정을 불리시켜서
 * 반복 실행되는것을 최소화하는것이 필요함. 
 * 씬변경 대응  // UI관련된애들은 캔버스를 별도로 할당할것..(미사용 캔버스..) 사용시만 옮기고, 그외에는 대기..
 * ??? 풀링 설계가 끝나면 애니메이션 로직 설정
 * 
 * ??? 전투 / 일반 AI / 점수 데이터 / 그래픽 오브젝트를 별도 생성.. 그래픽애들은 프리팹으로 별도할당 또는 머터리얼만 생성..
 * 
 * 11. 건물 설계
 * 
 * 
 * 13. 옵션설정
 * 
 * 14. 보상설계 
 * 
 * 15. 경험치 및 레벨 디자인
 * 
 * 16. 몬스터 레벨디자인
 * 
 * 17. 플레이어 유닛 컨트롤러 설계
 * 
 * 18. 플레이어 영웅 컨트롤러 설계
 * 
 * 19. 에셋번들
 * 
 * 
 * 
 * 씬전환시에만 특정 매니저 작동하는구조로 변경 오프닝에서는 게임매니저만 작동
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 */
